[
  {
    "path": "posts/2021-03-09-deep-learning-in-production-links-from-reddit/",
    "title": "Deep learning in production",
    "description": "Cool links from Reddit",
    "author": [
      {
        "name": "SergiosKar",
        "url": "https://www.reddit.com/r/MachineLearning/comments/m0ew90/d_deep_learning_in_production/"
      }
    ],
    "date": "2021-03-09",
    "categories": [],
    "contents": "\nMachine Learning Infrastructure has been neglected for quite some time by ml educators and content creators. It recently started to gain some traction but the content out there is still limited. Since I believe that it is an integral part of the ML pipeline, I recently finished an article series where I explore how to build, train, deploy and scale Deep Learning models (alongside with code for every post). Feel free to check it out and let me know your thoughts. I am also thinking to expand it into a full book so feedback is much appreciated.\nLaptop set up and system design: https://theaisummer.com/deep-learning-production/\nBest practices to write Deep Learning code: Project structure, OOP, Type checking and documentation: https://theaisummer.com/best-practices-deep-learning-code/\nHow to Unit Test Deep Learning: Tests in TensorFlow, mocking and test coverage: https://theaisummer.com/unit-test-deep-learning/\nLogging and Debugging in Machine Learning: https://theaisummer.com/logging-debugging/\nData preprocessing for deep learning: https://theaisummer.com/data-preprocessing/\nData preprocessing for deep learning (part2): https://theaisummer.com/data-processing-optimization/\nHow to build a custom production-ready Deep Learning Training loop in Tensorflow from scratch: https://theaisummer.com/tensorflow-training-loop/\nHow to train a deep learning model in the cloud: https://theaisummer.com/training-cloud/\nDistributed Deep Learning training: Model and Data Parallelism in Tensorflow: https://theaisummer.com/distributed-training/\nDeploy a Deep Learning model as a web application using Flask and Tensorflow: https://theaisummer.com/deploy-flask-tensorflow/\nHow to use uWSGI and Nginx to serve a Deep Learning model: https://theaisummer.com/uwsgi-nginx/\nHow to use Docker containers and Docker Compose for Deep Learning applications: https://theaisummer.com/docker/\nScalability in Machine Learning: Grow your model to serve millions of users: https://theaisummer.com/scalability/\nIntroduction to Kubernetes with Google Cloud: Deploy your Deep Learning model effortlessly: https://theaisummer.com/kubernetes/\nGithub: https://github.com/The-AI-Summer/Deep-Learning-In-Production\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-09T13:04:31+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-09-hello-world/",
    "title": "Hello, world!",
    "description": "Instructions for using Distill as a notepad",
    "author": [
      {
        "name": "Darya Vanichkina",
        "url": "daryavanichkina.com"
      }
    ],
    "date": "2021-03-09",
    "categories": [],
    "contents": "\nIn this “post”, I’d like to offer details (mostly for myself) on how to get this to work. I save a lot of links to materials/blog posts/RWeekly/RBloggers posts, and instead of reading them, taking notes and forgetting them I’d like to instead use this space to host them as, effectively, a public Evernote/Bear/Quiver/notetaking tool of choice.\nWhen you want to save a blog post from the interwebs:\nOpen this project\nRun distill::create_post(“The random post title”)\nThis will create and Rmd document for the post.\nEdit the metadata, especially author and original URL. Then open the .Rmd in Typora.\nCopy/paste the content into Typora. Make sure you correctly set the image file paths to match what Rmd expects.\nKnit the document in Rstudio. Make sure to add to any R code chunks that have been copy/pasted.\nBuild the website in the Build tab in Rstudio.\nPush to GitHub.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-09T13:34:08+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-09-powerpoint-slides-in-r-via-officer-a-handholding-guide/",
    "title": "PowerPoint Slides in R via officer: A handholding guide",
    "description": "How to make ppt from R",
    "author": [
      {
        "name": "Ljupcho Naumov",
        "url": "https://ljupcho.com/blog/powerpoint"
      }
    ],
    "date": "2021-03-09",
    "categories": [
      "Word"
    ],
    "contents": "\nPowerPoint Slides in R via officer: A handholding guide\nThe officer library, while powerful, is not easy to figure out. This guide aims to give you all the gotchas to create a professional template in PowerPoint that can be filled in with content from R or shiny.\nThe 3 gotchas are:\nThe template slides need to be made as slide masters, not actual slides.\nThe content placeholders need to be actual PowerPoint placeholders found in the Master slide view, and not textboxes.\nYou can change the placeholder labels with Alt + F10. Alternatively, Home > Arrange > Selection Pane. These labels will serve as an ID for the placeholders so you can refer to them in the code.\nExample: Stock Summary Slide\nThe example I’ll be holding you hand through will be a stock presentation. We’ll use data for public companies to create a 1 page stock summary for a given stock ticker. The only user input to the code is the stock ticker. It will look like this. You can see all the code and presentations already generated for companies like Apple, Berkshire and Gamestop on the Github.\nimg1. Open a new Powerpoint file and Delete All Master Templates\nOpen the Master slides by going to View > Slide Master. Delete everything. Leave nothing behind. On the one master powerpoint won’t let you delete, delete all the elements. Now you should have a blank canvas to design your slide templates. If you already have a company slide template, you can copy that here. Be sure to name every slide template with Right Click > Rename Layout.\n2. Place your content placeholders and design your slide\nNow’s the time for the first two gotchas. You create your template within this Master Slide, and for placeholders you use the Powerpoint given ones, not textboxes or other shapes. The placeholders are found Slide Master > Insert Placeholder > Text. You can use the other placeholder types as well, but as far as I know the placeholder type doesn’t matter for officer. In the placeholder you can type in text to remind yourself what content goes where, but also to format the final text. Formatting options such as font, size and color will be applied on the text plugged in from R. Pro tip: If you want the text to fully fit the defined placeholder remove the placeholder margins which Powerpoint automatically adds. Right click on the placeholder > Format Shape > Text Options > Click on the 3rd Icon > Set all the margins down to 0cm.\n3. Label your Placeholders\nThe labels will serve as placholder IDs so that we can refer to them with officer. Once the placeholders are in place, click Alt + F10 to access the element label menu. Here you can see that PowerPoint has given the elements useless labels like Text Placeholder 3, and if you’ve copy pasted placeholders be sure that PowerPoint has duplicated the label as well. By doubleclicking the labels you can change them into something more identifiable. With these labels you’ll tell officer what content to put where.\n4. Open R and see how officer percieves the template\nWith the placeholders labeled we leave powerpoint for the comfort of R. First we load officer and read in the powerpoint template.\n\n\nlibrary(tidyverse)\nlibrary(officer)\nlibrary(yfinance)\n\nread_pptx(\"stock_summary_template.pptx\") %>% officer::layout_properties()\n\n\n\nlayout_properties() shows you how Officer sees the elements you’ve just defined. master_name is the name of the Slide master (the very first slide you see on Slide Master view) and name is the slide name (defined in step 1). type and id we won’t use. ph_label is the most important column and here you should see the labels defined in step 3. The rest of the columns are dimensions of the elements, offx and offy are the x and y coordinates of the top left corner of the element, and cx and cy are the width and length of the elements in inches. These dimensions, especially width(cx) will be especially useful when creating images or tables for your presentation using the flextable package, where heights and widths have to be defined. That way you can define the placeholder by hand in powerpoint, get the width and height, and create elements in R that exactly fit the placholder space.\n5. Fill out the template\n​ Now that we have the template loaded, it’s time to create the content and place it in the powerpoint. In our presentation we’ll have a company description (text), 12 months price result (image), and Sales Growth and EBIT margin charts (ggplot). First let’s load the libraries. The only custom function I have is a function to get and calculate the width and height of placeholders.\n\n\n# Libraries and functions\nlibrary(tidyverse)\nlibrary(officer)\nlibrary(quantmod)\nlibrary(yfinance)\nlibrary(ggdark)\nlibrary(rvg)\n\nget_placeholder_dims <- function(presentation, label, dim = \"width\", unit = \"in\") {\n   layout <- officer::layout_properties(presentation)\n   ifelse(\n     dim==\"width\",\n     dimension <- layout$cx[match(label, layout$ph_label)],\n     dimension <- layout$cy[match(label, layout$ph_label)]\n   )\n\n   if (unit == \"in\") {\n     dimension\n   } else if (unit == \"px\") {\n     dimension*96\n   } else if (unit == \"cm\") {\n     dimension * 2.54\n   } else stop(glue::glue(\"Only 'in', 'px' and 'cm' are supported as units. You entered '{unit}'.\"))\n}\n\n\n\nLet’s start at the ending: how the content plugs into the powerpoint.\n\n  my_pres <- read_pptx(\"stock_summary_template.pptx\") %>%   # reads in the tempalate\n        remove_slide(index = 1) %>%                         # deletes the first slide. All presentations must have at lease one actual slide to be saved.\n        add_slide(layout = \"Company Summary\", master = \"Office Theme\") %>%    # we add a slide according to the layout we have named \"Company Summary\" which is under the \"Office Theme\" master\n        ph_with(value = company_name, location = ph_location_label(ph_label = \"Company Name\")  ) %>%   # put the string company_name in the Company Name placeholder\n        ph_with(value = ticker location = ph_location_label(ph_label = \"Ticker\")  ) %>%               # put ticker in the ticker placeholder\n        ph_with(value = glue::glue(\"Sector: {summary$sector}\") , location = ph_location_label(ph_label = \"Sector\")  ) %>%\n        ph_with(value = glue::glue(\"Industry: {summary$industry}\"), location = ph_location_label(ph_label = \"Industry\")  ) %>%  # put the sector and industry strings in their respective placeholders\n        ph_with(value = summary$longBusinessSummary, location = ph_location_label(ph_label = \"Company Summary\")  ) %>%   # put the summary ...\n        ph_with(value = external_img(ttm_performance_path), location = ph_location_label(ph_label = \"TTM Perfromance\")  ) %>%  # HARD PART, look below: take the image located at ttm_performance_path and put it at the TTM Perfromance placeholder\n        ph_with(value = rvg::dml(ggobj = sales_growth, bg = \"transparent\"), location = ph_location_label(ph_label = \"Sales Growth\")  ) %>%   # take the ggplot object sales_growth and place it. rvg::dml is magic we'll discuss below.\n        ph_with(value = rvg::dml(ggobj = ebit_margin, bg = \"transparent\"), location = ph_location_label(ph_label = \"EBIT Margin\")  )   # Same, take the ggplot object ebit_margin and place it\n\nprint(my_pres, glue::glue(\"presentations/{company_name} Summary {Sys.Date()}.pptx\")) # Finally print the presentation with the commpany name at a given location. DONE!\n\nNow let’s create the hard content. The string based content is easy, basically put the string in value, and define the location with ph_location_label. For the hard part let’s start with a chart for the 12 Month perfromance of the stock. As officer doesn’t natively support chart objects from quantmod, we’ll convert the output into an image that we’ll plug in the powerpoint. In the code below I have explanations as comments.\n\n  presentation <- read_pptx(\"stock_summary_template.pptx\") # let's read in the template as we did\n\n  ticker <- \"AMZN\" # the only input, the stock ticker\n\n  company_name <- yfinance::get_company_names(ticker)\n  summary <- yfinance::get_summaries(ticker) # here we have a business symmary, as well as data on the sector and industry of the company\n\n  ttm_performance_path <- glue::glue(\"presentations/images/{ticker} TTM Chart.png\") # The location where we want to save the image. To plug in to the Powerpoint, we use this path along with external_img().\n\n  prices <- getSymbols(ticker from=Sys.Date()-365, to = Sys.Date(), auto.assign = FALSE) # get the price and volatility data from the stock\n\n  png(filename = ttm_performance_path,\n      width = get_placeholder_dims(presentation, \"TTM Perfromance\", dim =\"width\", unit = \"px\"),\n      height = get_placeholder_dims(presentation, \"TTM Perfromance\", dim = \"hight\", unit = \"px\")\n      )\n# this sets up the image location as well as the width and height in pixels. Using my function, it can pull the data directly from the powerpoint placholder in order to create an image to perfectly fit the predefined area.\n\n\n  chartSeries(prices, name = glue::glue(\"{ticker} - 12 Months\"), type=\"line\") # this is the actual chart\n\n  dev.off() # this tells R to save the chart with the previous settings\n\nNext are two ggplots. When we add them to the presentation we wrap them in rvg::dml(). This converts the ggplot into a vector graphic, such that every element of it, like title, axis names, even line colors can be changed directly in Powerpoint. Also resizes don’t skew the image proportions. We could have provided directly the ggplot objects, but the final plots would have been images that get distorted if you change only the width for instance. Using rvg::dml() gives as much flexibility to do finishing touches in Powerpoint as if you made the chart natively in Office.\n\n\n  ebit_margin <-\n  get_income(ticker) %>%\n  mutate(\n    ebit_margin = ebit / totalRevenue\n  ) %>%\n  ggplot()+\n  geom_bar(mapping = aes(x = date, y = ebit_margin), stat = \"identity\", fill = \"#5efc82\", width = 0.4)+\n  geom_text(\n    mapping = aes(x = date, y = ebit_margin, label = paste0(round(ebit_margin*100, 2), \"%\")),\n    vjust = -0.2\n  )+\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1))+\n  labs(title = \"EBIT Margin\", x = \"Date\", y = \"EBIT Margin\")+\n  dark_theme_gray()+\n  theme(\n    text = element_text(size = 11),\n    plot.background =element_blank(),\n    panel.background = element_blank(),\n    panel.grid.major = element_line(color = \"grey30\", size = 0.2),\n    panel.grid.minor = element_blank()\n  )\n\n  sales_growth <-\n    get_income(ticker) %>%\n    arrange(date) %>%\n    mutate(\n      sales_growth = totalRevenue / lag(totalRevenue) - 1\n    ) %>%\n    dplyr::filter(!is.na(sales_growth)) %>%\n    ggplot()+\n    geom_bar(mapping = aes(x = date, y = sales_growth), stat = \"identity\", fill = \"#6200ea\", width = 0.4)+\n    geom_text(\n      mapping = aes(x = date, y = sales_growth, label = paste0(round(sales_growth*100, 2), \"%\")),\n      vjust = -0.2\n    )+\n    scale_y_continuous(labels = scales::percent_format(accuracy = 1))+\n    labs(title = \"Sales Growth\", x = \"Date\", y = \"Sales Growth\")+\n    dark_theme_gray()+\n    theme(\n      text = element_text(size = 11),\n      plot.background = element_blank(),\n      panel.background = element_blank(),\n      panel.grid.major = element_line(color = \"grey30\", size = 0.2),\n      panel.grid.minor = element_blank()\n    )\n\n\n\nAll of the code together:\n\n\n  library(tidyverse)\n  library(officer)\n  library(quantmod)\n  library(yfinance)\n  library(ggdark)\n  library(rvg)\n\n\n  get_placeholder_dims <- function(presentation, label, dim = \"width\", unit = \"in\") {\n     layout <- officer::layout_properties(presentation)\n     ifelse(\n       dim==\"width\",\n       dimension <- layout$cx[match(label, layout$ph_label)],\n       dimension <- layout$cy[match(label, layout$ph_label)]\n     )\n\n     if (unit == \"in\") {\n       dimension\n     } else if (unit == \"px\") {\n       dimension*96\n     } else if (unit == \"cm\") {\n       dimension * 2.54\n     } else stop(glue::glue(\"Only 'in', 'px' and 'cm' are supported as units. You entered '{unit}'.\"))\n  }\n\n\n\n\npresentation <- read_pptx(\"stock_summary_template.pptx\")\n\nticker <- \"AMZN\"\n\ncompany_name <- yfinance::get_company_names(ticker)\nsummary <- yfinance::get_summaries(ticker)\n\nttm_performance_path <- glue::glue(\"presentations/images/{ticker} TTM Chart.png\")\n\nprices <- getSymbols(ticker from=Sys.Date()-365, to = Sys.Date(), auto.assign = FALSE)\n\npng(filename = ttm_performance_path,\n    width = get_placeholder_dims(presentation, \"TTM Perfromance\", dim =\"width\", unit = \"px\"),\n    height = get_placeholder_dims(presentation, \"TTM Perfromance\", dim = \"hight\", unit = \"px\")\n    )\nchartSeries(prices, name = glue::glue(\"{ticker} - 12 Months\"), type=\"line\")\n\ndev.off()\n\nebit_margin <-\n  get_income(ticker) %>%\n  mutate(\n    ebit_margin = ebit / totalRevenue\n  ) %>%\n  ggplot()+\n  geom_bar(mapping = aes(x = date, y = ebit_margin), stat = \"identity\", fill = \"#5efc82\", width = 0.4)+\n  geom_text(\n    mapping = aes(x = date, y = ebit_margin, label = paste0(round(ebit_margin*100, 2), \"%\")),\n    vjust = -0.2\n  )+\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1))+\n  labs(title = \"EBIT Margin\", x = \"Date\", y = \"EBIT Margin\")+\n  dark_theme_gray()+\n  theme(\n    text = element_text(size = 11),\n    plot.background =element_blank(),\n    panel.background = element_blank(),\n    panel.grid.major = element_line(color = \"grey30\", size = 0.2),\n    panel.grid.minor = element_blank()\n  )\n\n\nsales_growth <-\n  get_income(ticker) %>%\n  arrange(date) %>%\n  mutate(\n    sales_growth = totalRevenue / lag(totalRevenue) - 1\n  ) %>%\n  dplyr::filter(!is.na(sales_growth)) %>%\n  ggplot()+\n  geom_bar(mapping = aes(x = date, y = sales_growth), stat = \"identity\", fill = \"#6200ea\", width = 0.4)+\n  geom_text(\n    mapping = aes(x = date, y = sales_growth, label = paste0(round(sales_growth*100, 2), \"%\")),\n    vjust = -0.2\n  )+\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1))+\n  labs(title = \"Sales Growth\", x = \"Date\", y = \"Sales Growth\")+\n  dark_theme_gray()+\n  theme(\n    text = element_text(size = 11),\n    plot.background = element_blank(),\n    panel.background = element_blank(),\n    panel.grid.major = element_line(color = \"grey30\", size = 0.2),\n    panel.grid.minor = element_blank()\n  )\n\n\nmy_pres <- presentation %>%\n        remove_slide(index = 1) %>%\n        add_slide(layout = \"Company Summary\", master = \"Office Theme\") %>%\n        ph_with(value = company_name, location = ph_location_label(ph_label = \"Company Name\")  ) %>%\n        ph_with(value = ticker location = ph_location_label(ph_label = \"Ticker\")  ) %>%\n        ph_with(value = glue::glue(\"Sector: {summary$sector}\") , location = ph_location_label(ph_label = \"Sector\")  ) %>%\n        ph_with(value = glue::glue(\"Industry: {summary$industry}\"), location = ph_location_label(ph_label = \"Industry\")  ) %>%\n        ph_with(value = summary$longBusinessSummary, location = ph_location_label(ph_label = \"Company Summary\")  ) %>%\n        ph_with(value = external_img(ttm_performance_path), location = ph_location_label(ph_label = \"TTM Perfromance\")  ) %>%\n        ph_with(value = rvg::dml(ggobj = sales_growth, bg = \"transparent\"), location = ph_location_label(ph_label = \"Sales Growth\")  ) %>%\n        ph_with(value = rvg::dml(ggobj = ebit_margin, bg = \"transparent\"), location = ph_location_label(ph_label = \"EBIT Margin\")  )\n\nprint(my_pres, glue::glue(\"presentations/{company_name} Summary {Sys.Date()}.pptx\"))\n\nThere you have it. You can find the code also on Github. I’m sure I’ve dropped your hand at some point, so to drive the (power)point across, I’ll be making a youtube tutorial as well. Stay tuned and feel free to reach out with questions.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-09T13:23:02+11:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to Darya's public pocket",
    "description": "This is a public note space",
    "author": [
      {
        "name": "Darya Vanichkina",
        "url": "daryavanichkina.com"
      }
    ],
    "date": "2021-03-09",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-09T12:54:30+11:00",
    "input_file": {}
  }
]
